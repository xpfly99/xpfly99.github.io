<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatisPlus之代码生成器</title>
      <link href="/2023/03/31/MyBatisPlus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2023/03/31/MyBatisPlus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>引入依赖</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- freemarker --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>快速生成</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fei<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>FastAutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>OutputFile<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>FreemarkerTemplateEngine<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author hhf * @version 1.0 * @description TODO * @date 2023/2/24 13:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/yygh_hosp?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"258769"</span><span class="token punctuation">;</span>        String moduleName <span class="token operator">=</span> <span class="token string">"hosp"</span><span class="token punctuation">;</span>        String mapperLocation <span class="token operator">=</span> <span class="token string">"D:\\Maven\\maven-workspace\\yygh_parent\\service\\service_hosp\\src\\main\\resources\\mapper\\"</span><span class="token operator">+</span>moduleName<span class="token punctuation">;</span>        String tables <span class="token operator">=</span> <span class="token string">"hospital_set"</span><span class="token punctuation">;</span>        FastAutoGenerator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"fei"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置作者</span>                            <span class="token punctuation">.</span><span class="token function">enableSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开启 swagger 模式</span>                            <span class="token punctuation">.</span><span class="token function">fileOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 覆盖已生成文件</span>                            <span class="token punctuation">.</span><span class="token function">outputDir</span><span class="token punctuation">(</span><span class="token string">"D:\\Maven\\maven-workspace\\yygh_parent\\service\\service_hosp\\src\\main\\java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定输出目录</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">packageConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">"com.fei.yygh"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置父包名</span>                            <span class="token punctuation">.</span><span class="token function">moduleName</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置父包模块名</span>                            <span class="token punctuation">.</span><span class="token function">pathInfo</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>OutputFile<span class="token punctuation">.</span>xml<span class="token punctuation">,</span> mapperLocation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置mapperXml生成路径</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">strategyConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置需要生成的表名</span>                            <span class="token punctuation">.</span><span class="token function">addTablePrefix</span><span class="token punctuation">(</span><span class="token string">"x_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置过滤表前缀</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">templateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果报错为</p><pre class=" language-java"><code class="language-java"><span class="token number">10</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">00.524</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> DEBUG com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>准备生成文件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>=<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchFieldError<span class="token operator">:</span> GAUSS    at com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>querys<span class="token punctuation">.</span>DbQueryRegistry<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>DbQueryRegistry<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">44</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">.</span><span class="token function">getDbQuery</span><span class="token punctuation">(</span>DataSourceConfig<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">102</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>querys<span class="token punctuation">.</span>DecoratorDbQuery<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>DecoratorDbQuery<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">57</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>IDatabaseQuery$DefaultDatabaseQuery<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>IDatabaseQuery<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">97</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>AutoGenerator<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">179</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>FastAutoGenerator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>FastAutoGenerator<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">213</span><span class="token punctuation">)</span></code></pre><p>将mybatis-plus的依赖也使用3.5.1以上版本</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">3.5</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>version<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatisPlus </tag>
            
            <tag> 代码生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea连接GitHub并上传项目</title>
      <link href="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>1.在GitHub上创建一个和项目同名的仓库</strong></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331174705258.png"></p><p><strong>在这里输入仓库名称，并完成创建</strong></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331174812089.png"></p><p><strong>2.在idea中找到 VCS–&gt;Create Git Repository… –&gt;选择自己的项目–&gt;OK</strong></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331175034488.png"></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331175130705.png"></p><p><strong>3.右击项目–&gt;Git–&gt;Manage Remotes…</strong></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331175413361.png"></p><p><strong>点击＋号</strong></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331175555830.png"></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331175658030.png"></p><p><strong>取一个名字，并将GitHub创建好的仓库的地址复制上去</strong></p><p><img src="/2023/03/31/idea%E8%BF%9E%E6%8E%A5GitHub%E5%B9%B6%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/image-20230331175801210.png"></p><p><strong>点击OK，然后可以选择登录验证或者token验证</strong></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-plus 自动填充和乐观锁</title>
      <link href="/2023/03/30/MyBatisPlus-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/2023/03/30/MyBatisPlus-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="一、自动填充"><a href="#一、自动填充" class="headerlink" title="一、自动填充"></a>一、自动填充</h1><p>​需求描述：</p><p>​项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的创建时间，更新时间等。</p><p>我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作</p><h2 id="1、数据修改"><a href="#1、数据修改" class="headerlink" title="1、数据修改"></a>1、数据修改</h2><p>​在User表中添加datetime类型的新的字段 create_time、update_time</p><p><img src="/2023/03/30/MyBatisPlus-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B9%90%E8%A7%82%E9%94%81/image-20230330172116839.png"></p><h2 id="2、实体类修改"><a href="#2、实体类修改" class="headerlink" title="2、实体类修改"></a>2、实体类修改</h2><p>​实体上增加字段并添加自动填充注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//添加的时候设置值</span><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//create_time</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改的时候设置值，并且第一次添加时update—time也有值</span><span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//update_time</span></code></pre><h2 id="3、实现元对象处理器接口"><a href="#3、实现元对象处理器接口" class="headerlink" title="3、实现元对象处理器接口"></a>3、实现元对象处理器接口</h2><p>​注意：不要忘记添加 @Component 注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//将类的对象创建交给spring管理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//mp执行添加操作，这个方法执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//mp执行修改操作，这个方法执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二、乐观锁"><a href="#二、乐观锁" class="headerlink" title="二、乐观锁"></a>二、乐观锁</h1><p>​<strong>主要适用场景：</strong>当要更新一条记录的时候，希望这条记录没有被别人更新，也就是说实现线程安全的数据更新（可用于抢票）</p><p>​如：某公司产品销量不好，于是老板吩咐小王把产品定价下调50元，小王一口答应了下来，但是小王还在摸鱼，没有马上去修改产品的定价。过了一会老板觉得下调50元太亏了，于是吩咐另外一个员工小白去把产品定价下调30元。不巧的是，小王和小白先后对这条数据进行了更新，于是产品价格被调低了80元，老板亏死了~。</p><p>​代码模拟：</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：原价为1000，最终降价为9970</span>        <span class="token comment" spellcheck="true">//小王进行数据查询</span>        Dish dishWW <span class="token operator">=</span> dishMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">00001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//小白进行数据查询</span>        Dish dishBB <span class="token operator">=</span> dishMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">00001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//小王修改价格，下调50元</span>        dishWW<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>dishWW<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dishMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>dishWW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小白修改价格，下调30元</span>        dishBB<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>dishBB<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dishMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>dishBB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​<strong>乐观锁实现方式：</strong></p><p>​1.取出记录时，获取当前version</p><p>​2.更新时，带上这个version，执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion，如果version不对，就更新失败</p><p>​3.跟新成功后，数据库的version版本自动更新</p><p>​接下来介绍如何在Mybatis-Plus项目中，使用乐观锁：</p><h2 id="1、修改数据表"><a href="#1、修改数据表" class="headerlink" title="1、修改数据表"></a>1、修改数据表</h2><p>​在表中添加字段作为版本号</p><p><img src="/2023/03/30/MyBatisPlus-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B9%90%E8%A7%82%E9%94%81/image-20230330175430488.png"></p><h2 id="2、修改实体类"><a href="#2、修改实体类" class="headerlink" title="2、修改实体类"></a>2、修改实体类</h2><p>​在表对应实体类中添加版本号属性,并在版本号属性上添加@Version注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span><span class="token keyword">private</span> Integer version<span class="token punctuation">;</span></code></pre><h2 id="3、配置乐观锁插件"><a href="#3、配置乐观锁插件" class="headerlink" title="3、配置乐观锁插件"></a>3、配置乐观锁插件</h2><p>​创建包config，创建文件MybatisPlusConfig.java</p><p>​此时可以删除主类中的 @MapperScan 扫描注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.demomptest.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 乐观锁插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、MP的分页功能"><a href="#三、MP的分页功能" class="headerlink" title="三、MP的分页功能"></a>三、MP的分页功能</h1><p>​MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><h2 id="1、配置分页插件"><a href="#1、配置分页插件" class="headerlink" title="1、配置分页插件"></a>1、配置分页插件</h2><p>​配置类中添加分页插件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.demomptest.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 乐观锁插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>brrbaii<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>MybatisPlusInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span>OptimisticLockerInnerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span>PaginationInnerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span> <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1，定义Mp拦截器</span>        MybatisPlusInterceptor mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2，添加具体的拦截器，这里添加的为分页拦截器</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3，添加乐观锁拦截器</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="2、编写分页代码"><a href="#2、编写分页代码" class="headerlink" title="2、编写分页代码"></a>2、编写分页代码</h2><h3 id="测试selectPage分页"><a href="#测试selectPage分页" class="headerlink" title="测试selectPage分页"></a><strong>测试selectPage分页</strong></h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分页查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前页  每页记录数</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面为分页条件</span>    <span class="token comment" spellcheck="true">//返回对象得到分页所有数据</span>    <span class="token keyword">long</span> pages <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//总页数</span>    <span class="token keyword">long</span> current <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前页</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> records <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询数据集合</span>    <span class="token keyword">long</span> total <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//总记录数</span>    <span class="token keyword">boolean</span> hasNext <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//下一页</span>    <span class="token keyword">boolean</span> hasPrevious <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上一页</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hasPrevious<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="测试selectMapsPage分页"><a href="#测试selectMapsPage分页" class="headerlink" title="测试selectMapsPage分页"></a>测试selectMapsPage分页</h3><p>当指定了特定的查询列时，希望分页结果列表只返回被查询的列，而不是很多null值</p><p>测试selectMapsPage分页：结果集是Map</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMapsPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Page不需要泛型</span>Page<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> page <span class="token operator">=</span> newPage<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> pageParam <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMapsPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> records <span class="token operator">=</span> pageParam<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>records<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatisPlus </tag>
            
            <tag> 自动填充 </tag>
            
            <tag> 乐观锁 </tag>
            
            <tag> 分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试八股--Java基础</title>
      <link href="/2023/03/16/%E9%9D%A2%E8%AF%95Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/16/%E9%9D%A2%E8%AF%95Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>Java设计模式七大原则？</strong></p><p>​1 单一职责原则：每个类只负责自己的事情，而不是变成万能的</p><p>​2 接口隔离原则：各个类建立自己的专用接口，而不是建立万能接口</p><p>​3 依赖倒转原则：面向接口编程，而不是面向实现类</p><p>​4 里氏替换原则：继承父类而不改变父类</p><p>​5 开闭原则：开辟新类而不是改变旧类</p><p>​6 迪米特法则：无需直接交互的两个类，如果需要交互，使用中间者</p><p>​7 合成复用原则：优先组合，其次继承</p><p><strong>instanceof</strong> <strong>关键字的作用</strong></p><p>​instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例，用法为：</p><pre class=" language-Java"><code class="language-Java">boolean result = obj instanceof Class </code></pre><p>其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。</p><p><strong>什么是隐式转换，什么是显式转换</strong></p><p>​显示转换就是类型强转，把一个大类型的数据强制赋值给小类型的数据；隐式转换就是大范围的变量能够接受小范围的数据；隐式转换和显式转换其实就是自动类型转换和强制类型转换。</p><p><strong>什么是拆装箱？</strong></p><p>​装箱就是自动将基本数据类型转换为包装器类型（int–&gt;Integer）；调用方法：Integer的<strong>valueOf(int)方法</strong></p><p>​拆箱就是自动将包装器类型转换为基本数据类型（Integer–&gt;int）。调用方法：Integer的<strong>intValue</strong>方法</p><p>​在Java SE5之前，如果要生成一个数值为10的Integer对象，必须这样进行：</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token function">newInteger</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要这</p><p>样就可以了：</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p><strong>面向对象的三大特征</strong></p><p>​<strong>封装</strong>：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口</p><p>​<strong>继承</strong>：继承是从已有类得到继承信息创建新类的过程.提供继承信息的类被称为父类(超类、基类) ;得到继承信息的类被称为子类(派生类)。继承让变化中的软件系统有了一定的延续性 ,同时继承也是封装程序中可变因素的重要手段。</p><p>​<strong>多态：</strong>多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。</p><p><strong>equals与&#x3D;&#x3D;的区别</strong></p><p>​&#x3D;&#x3D; 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。</p><p>​equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是&#x3D;&#x3D;的判断。</p><p><strong>String、String StringBuffffer和StringBuilder 的区别是什么</strong></p><p>​String是只读字符串，它并不是基本数据类型，而是一个对象，底层源码是一个final类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增善改，每次对String的操作都会生成新的String对象。</p><p>​StringBuffffer和StringBuilder他们两都继承了AbstractStringBuilder抽象类，他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用StringBuffffer和StringBuilder来进行操作。 另外StringBuffffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的，StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>内部类与静态内部类的区别</strong></p><p>​静态内部类相对于外部类是独立存在的，在静态内部类中无法直接访问外部类中的变量、方法。如果想要访问的话，可以new一个外部类对象，使用创建出来的对象去访问。但是静态内部类中可以直接访问外部类中静态的变量、调用静态的方法。</p><p>​普通内部类作为外部类的一个成员存在，可以直接访问外部类属性、调用外部类方法。</p><p>​如果外部类要访问内部类的属性或者调用内部类的方法，必须要创建一个内部类的对象，适用对象去访问属性或者调用方法</p><p>​如果其他的类要访问普通内部类的属性或者调用普通内部类的方法，必须要在外部类中创建一个普通内部类的对象作为一个属性，外同类可以通过该属性调用普通内部类的方法或者访问普通内部类的属性</p><p>​如果其他的类要访问静态内部类的属性或者调用静态内部类的方法，直接创建一个静态内部类对象即可</p><p><strong>Static关键字有什么作用</strong></p><p>​Static可以修饰内部类、方法、变量、代码块</p><p>​Static修饰的类是静态内部类</p><p>​Static修饰的方法是静态方法，表示该方法属于当前类的，而不属于某个对象的，静态方法也不能被重写，可以直接使用类名来调用。在static方法中不能使用this或者super关键字。</p><p>​Static修饰变量是静态变量或者叫类变量，静态变量被所有实例所共享，不会依赖于对象。静态变量在内存中只有一份拷贝，在JVM加载类的时候，只为静态分配一次内存。</p><p>​Static修饰的代码块叫静态代码块，通常用来做程序优化的。静态代码块中的代码在整个类加载的时候只会执行一次。静态代码块可以有多个，如果有多个，按照先后顺序依次执行。</p><p><strong>ﬁnal在java中的作用，有哪些用法?</strong></p><p>​被ﬁnal修饰的类不可以被继承</p><p>​被ﬁnal修饰的方法不可以被重写</p><p>​被ﬁnal修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.</p><p>​被ﬁnal修饰的方法,JVM会尝试将其内联,以提高运行效率</p><p>​被ﬁnal修饰的常量,在编译阶段会存入常量池中.</p><p><strong>Java创建对象的几种方式？</strong></p><p>​1. new创建新对象</p><ol start="2"><li><p>通过反射机制</p></li><li><p>采用clone机制</p></li><li><p>通过序列化机制</p></li></ol><p> <strong>拷贝和浅拷贝的区别是什么</strong></p><p>​浅拷贝仅仅复制所要拷贝的对象，而不复制所要拷贝对象的引用</p><p>​深拷贝不仅复制所要拷贝对象，还把要复制的对象所引用的对象都复制了一遍</p><p><strong>有没有可能两个不相等的对象有相同的hashcode</strong></p><p>​有可能.在产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般有以下几种方式来处理:</p><p>​1.拉链法:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储.</p><p>​2.开放定址法:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将记录存入</p><p>​3.再哈希:又叫双哈希法,有多个不同的Hash函数.当发生冲突时,使用第二个,第三个….等哈希函数计算地址,直到无冲突.</p><p><strong>抽象类（abstract class）和接口（interface）有什么异同</strong></p><p>​抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是 private、默认、protected、public 的，而接口中的成员全都是 public 的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><p><strong>如何实现对象克隆？</strong></p><p>​1. 实现 Cloneable 接口并重写 Object 类中的 clone()方法；</p><p>​2.实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆</p><p>​ 序列化就是将Java对象以一连串的字节保存在磁盘文件中的过程，也可以说是保存Java对象状态的过程。序列化可以将数据永久保存在磁盘上</p><p>​反序列化就是将保存在磁盘文件中的Java字节码重新转换成Java对象。</p><p><strong>常见的集合有哪些？</strong></p><p>​Java集合类主要由两个接口Collection和Map派生出来的，Collection有三个子接口：List、Set、Queue。</p><p>​List代表有序可重复的集合，可直接跟据元素的索引来访问。Set代表无序不可重复的集合，只能根据元素本身来访问。queue是队列集合。Map代表的是存储key-value对集合，可根据元素的key来访问value</p><p><strong>List集合：</strong></p><p>​ Java List 一共三个实现类：分别是 ArrayList、 Vector 和 LinkedList 。</p><p>​1. ArrayList 是最常用的 List 实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数</p><p>组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数</p><p>组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进</p><p>行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p><p>​2. Vector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，</p><p>访问它比访问 ArrayList 慢。</p><p>​3. LinkedList 是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较</p><p>慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆</p><p>栈、队列和双向队列使用</p><p><strong>Set集合</strong></p><p>​Set 注重独一无二的性质,该体系集合用于存储无序(存入和取出的顺序不一定相同)元素，值不能重</p><p>复。对象的相等性本质是对象 hashCode 值（java 是依据对象的内存地址计算出的此序号）判断</p><p>的，如果想要让两个不同的对象视为相等的，就必须覆盖 Object 的 hashCode 方法和 equals 方</p><p>法。</p><p>​1.  HashSet 存储元素的顺序并不是按照存入时的顺序（和 List 显然不同）而是按照哈希值来存的所以取数据也是按照哈希值取得。元素的哈希值是通过元素的hashcode 方法来获取的, HashSet 首先判断两个元素的哈希值，如果哈希值一样，接着会比较equals 方法如果 equls 结果为 true ， HashSet 就视为同一个元素。如果 equals 为 false 就不是同一个元素。HashSet 通过 hashCode 值来确定元素在内存中的位置。一个 hashCode 位置上可以存放多个元素。</p><ol start="2"><li>reeSet()是使用二叉树的原理对新 add()的对象按照指定的顺序排序（升序、降序），每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。</li><li>LinkedHashSet，它继承与 HashSet、又基于 LinkedHashMap 来实现的。LinkedHashSet 底层使LinkedHashMap 来保存所有元素，它继承与 HashSet，其所有的方法操作上又与 HashSet 相同，LinkedHashSet 的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个 LinkedHashMap 来实现，在相关操作上与父类 HashSet 的操作相同，直接调用父类 HashSet 的方法即可。</li></ol><p><strong>Map集合</strong></p><p>​1. HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap 最多只允许一条记录的键为 null，允许多条记</p><p>录的值为 null。 HashMap 非线程安全，即任一时刻可以有多个线程同时写 HashMap，可能会导</p><p>致数据的不一致。如果需要满足线程安全，可以用 Collections 的 synchronizedMap 方法使</p><p>HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。</p><p>​2. Hashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，</p><p>并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，</p><p>因为 ConcurrentHashMap 引入了分段锁。 Hashtable 不建议在新代码中使用，不需要线程安全</p><p>的场合可以用 HashMap 替换，需要线程安全的场合可以用 ConcurrentHashMap 替换</p><ol start="3"><li>TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，</li></ol><p>也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。如果使用排序的映射，建议使用 TreeMap。在使用 TreeMap 时， key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。</p><p>​4. LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用 Iterator 遍历</p><p>LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p><p><strong>Java集合的扩容机制</strong></p><p>​ArrayList和Vector底层都是Object类型数组，默认初始容量都是10，元素满了之后开始扩容。ArrayList扩容为原来的1.5倍，Vector扩容为原来的2倍。但是jdk1.8之后ArrayList初始是一个空数组，并不赋其数组长度，只有当第一次添加时，才创建了长度为10的数组。其余扩容与jdk1.7相同。</p><p>​LinkedList没有扩容机制，因为其底层是双向链表结构。LinkedHashSet和LinkedHashMap也都是链表，不存在扩容</p><p>​HashSet和HashMap都是默认初始容量是16（jdk1.7），但是jdk1.8做了优化，初始容量为0，只有当第一次put时才扩容为16，以后每当元素数量大于容量的75%时，就扩容为原来的两倍。  jdk1.8以前HashMap底层使用数组+链表组合，jdk1.8以后HashMap底层使用数组+链表+红黑树组合，它默认用链表，当链表长度为8时，就会转换成treenode红黑树（这是因为链表插入、删除很快，复杂的为o(1),而红黑树在插入的时候还需要自旋，效率会变慢，因此两者需要有一个临界点进行转换权衡） </p><p>​HashTable默认初始容量为11（扩容加载因子为0.75），也就是说每当元素个数大于容量的75%时，就会扩容，扩容为原来的2倍+1</p><p><strong>Thow与thorw区别</strong></p><p>​1.  throws 用在函数上，后面跟的是异常类，可以跟多个；而 throw 用在函数内，后面跟的是异常对象。</p><ol start="2"><li>throws 用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方式；throw 抛出具体的问题对象，执行到 throw，功能就已经结束了，跳转到调用者，并将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时，下面不要定义其他语句，因为执行不到。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某种异常对象。</li><li>两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</li></ol><p><strong>Error与Exception区别？</strong></p><p>​Error和Exception都是Java错误处理机制的一部分，都继承了Throwable类</p><p>​Exception表示的异常可以通过程序来捕捉，或者优化程序来避免</p><p>​Error表示的是系统错误，不能通过程序来进行错误处理</p><p><strong>java反射的作用</strong></p><p>​反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java 中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><p><strong>反射的实现方式</strong></p><p>​第一步：获取Class对象，有4中方法</p><p>1）Class.forName(“类的路径”)；</p><p>2）类名.class</p><p>3）对象名.getClass()</p><p>4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象</p><p><strong>反射机制的优缺点</strong></p><p>​<strong>优点：</strong></p><p>​1）能够运行时动态获取类的实例，提高灵活性；</p><p>​2）与动态编译结合</p><p>​<strong>缺点：</strong></p><p>​1）使用反射性能较低，需要解析字节码，将内存中的对象进行解析。</p><p>​2）相对不安全，破坏了封装性（因为通过反射可以获得私有方法和属性）</p><p> <strong>Java中实现多线程有几种方法</strong></p><p>​  <strong>1. 继承</strong> <strong>Thread</strong> <strong>类</strong>：Thread 类本质上是实现了 Runnable 接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过 Thread 类的 start()实例方法。 start()方法是一个 native 方法，它将启动一个新线程，并执行 run()方法。</p><p>​<strong>2. 实现</strong> <strong>Runnable</strong> <strong>接口</strong>:如果自己的类已经 extends 另一个类，就无法直接 extends Thread，此时，可以实现一个Runnable 接口。</p><p>​ <strong>3. 实现 Callable 接口</strong>:有返回值的任务必须实现 Callable 接口，类似的，无返回值的任务必须 Runnable 接口。执行Callable 任务后，可以获取一个 Future 的对象，在该对象上调用 get 就可以获取到 Callable 任务返回的 Object 了，再结合线程池接口 ExecutorService 就可以实现传说中有返回结果的多线程了。</p><p>​ <strong>4. 基于线程池的方式</strong>:线程和数据库连接这些资源都是非常宝贵的资源。那么每次需要的时候创建，不需要的时候销毁，是非常浪费资源的。那么我们就可以使用缓存的策略，也就是使用线程池。</p><p><strong>4</strong> <strong>种线程池</strong></p><p>​Java 里面线程池的顶级接口是 Executor，但是严格意义上讲 Executor 并不是一个线程池，而</p><p>只是一个执行线程的工具。真正的线程池接口是 ExecutorService。</p><p>​<strong>newCachedThreadPool</strong>:</p><p>​创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。</p><p>​<strong>newFixedThreadPool</strong></p><p>​创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</p><p>​<strong>newScheduledThreadPool</strong></p><p>​创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</p><p>​<strong>newSingleThreadExecutor</strong></p><p>​返回一个线程池（这个线程池只有一个线程） ,这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去！</p><p><strong>如何停止一个正在运行的线程</strong></p><p>​1、使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。</p><p>​2、使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法。</p><p>​3、使用interrupt方法中断线程。</p><p><strong>notify()和notifyAll()有什么区别？</strong></p><p>​notify可能会导致死锁，而notifyAll则不会,任何时候只有一个线程可以获得锁，也就是说只有一个线程可以运行synchronized 中的代码使用notifyall,可以唤醒所有处于wait状态的线程，使其重新进入锁的争夺队列中，而notify只能唤醒一个。</p><p><strong>sleep()和wait()有什么区别？</strong></p><ol><li>sleep()方法是属于 Thread 类中的,而 wait()方法，则是属于Object 类中的。</li><li>sleep()方法导致了程序暂停执行指定的时间，让出 cpu 该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态. 在调用 sleep()方法的过程中，线程不会释放对象锁。 </li><li>而当调用 wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</li></ol><p><strong>Thread</strong> <strong>类中的start()和run()方法有什么区别？</strong></p><p>​start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。</p><p>​1. start（）方法来启动线程，真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕，可以直接继续执行下面的代码。</p><ol start="2"><li><p>通过调用 Thread 类的 start()方法来启动一个线程，这时此线程是处于就绪状态，并没有运行。</p></li><li><p>方法 run()称为线程体，它包含了要执行的这个线程的内容，线程就进入了运行状态，开始运行 run 函数当中的代码。 Run 方法运行结束，此线程终止。然后 CPU 再调度其它线程。</p></li></ol><p><strong>为什么wait, notify 和notifyAll这些方法不在thread类里面？</strong></p><p>​Java提供的锁是对象级别的而不是线程级的，每个对象都有锁，通过线程活得。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。</p><p><strong>为什么wait和notify方法要在同步块中调用？</strong></p><ol><li><p>只有在调用线程拥有某个对象的独占锁时，才能够调用该对象的wait(),notify()和notifyAll()方法。</p></li><li><p>如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。</p></li><li><p>还有一个原因是为了避免wait和notify之间产生竞态条件。</p></li></ol><p>​wait()方法强制当前线程释放对象锁。这意味着在调用某对象的wait()方法之前，当前线程必须已经获得该对象的锁。因此，线程必须在某个对象的同步方法或同步代码块中才能调用该对象的wait()方法。        在调用对象的notify()和notifyAll()方法之前，调用线程必须已经得到该对象的锁。因此，必须在某个对象的同步方法或同步代码块中才能调用该对象的notify()或notifyAll()方法。</p><p><strong>Java中interrupted和isInterruptedd方法的区别？</strong></p><p>​interrupted() 和 isInterrupted()的主要区别是前者会将中断状态清除而后者不会。Java多线程的中断机制是用内部标识来实现的，调用Thread.interrupt()来中断一个线程就会设置中断标识为true。</p><p>​当中断线程调用静态方法Thread.interrupted()来检查中断状态时，中断状态会被清零。</p><p>​而非静态方法isInterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。</p><p><strong>Java中synchronized 和 ReentrantLock有什么不同？</strong></p><p>​<strong>相似点：</strong></p><p>​这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等待，而进行线程阻塞和唤醒的代价是比较高的.</p><p>​<strong>区别：</strong></p><p>​这两种方式最大区别就是对于Synchronized来说，它是java语言的关键字，是原生语法层面的互斥，需要jvm实现。而ReentrantLock它是JDK 1.5之后提供的API层面的互斥锁，需要lock()和unlock()方法配合try&#x2F;ﬁnally语句块来完成。</p><p><strong>有三个线程T1,T2,T3,如何保证顺序执行？</strong></p><p>​在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。</p><p><strong>SynchronizedMap和ConcurrentHashMap有什么区别？</strong></p><p>​SynchronizedMap()和Hashtable一样，实现上在调用map所有方法时，都对整个map进行同步。而</p><p>ConcurrentHashMap的实现却更加精细，它对map中的所有桶加了锁。所以，只要有一个线程访问</p><p>map，其他线程就无法进入map，而如果一个线程在访问ConcurrentHashMap某个桶时，其他线程，仍然可以对map执行某些操作。</p><p>​所以，ConcurrentHashMap在性能以及安全性方面，明显比Collections.synchronizedMap()更加有优势。同时，同步操作精确控制到桶，这样，即使在遍历map时，如果其他线程试图对map进行数据修改，也不会抛出ConcurrentModiﬁcationException 。</p><p> <strong>什么是线程安全</strong></p><p>​线程安全就是说多线程访问同一代码，不会产生不确定的结果。</p><p>​在多线程环境中，当各线程不共享数据的时候，即都是私有（private）成员，那么一定是线程安全的。但这种情况并不多见，在多数情况下需要共享数据，这时就需要进行适当的同步控制了。</p><p>​线程安全一般都涉及到synchronized，就是一段代码同时只能有一个线程来操作不然中间过程可能会产生不可预制的结果。</p><p>​如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p><strong>Thread类中的yield方法有什么作用？</strong></p><p>​Yield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行。</p><p><strong>Java线程池中submit() 和 execute()方法有什么区别？</strong></p><p>​两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中, 而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了Executor接口，其它线程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些方法。</p><p><strong>说一说自己对于 synchronized 关键字的了解</strong></p><p>​synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><p><strong>synchronized关键字最主要的三种使用方式</strong></p><p>​修饰实例方法、修饰静态方法、修饰代码块</p><p><strong>volatile关键字的作用？</strong></p><p>​一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><p>​1. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><p>​2. 禁止进行指令重排序。</p><p><strong>简述一下你对线程池的理解</strong></p><p>​第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p><p>​第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p><p>​第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</p><p><strong>线程生命周期(状态)</strong></p><p>​当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过新建(New)、就绪（Runnable）、运行（Running）、阻塞(Blocked)和死亡(Dead)5 种状态。尤其是当线程启动以后，它不可能一直”霸占”着 CPU 独自运行，所以 CPU 需要在多条线程之间切换，于是线程状态也会多次在运行、阻塞之间切换</p><p> <strong>什么是乐观锁</strong></p><p>​乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。</p><p>​java 中的乐观锁基本都是通过 CAS 操作实现的， CAS 是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</p><p><strong>什么是悲观锁</strong></p><p>​悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如 RetreenLock</p><p><strong>什么是自旋锁</strong></p><p>​自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。</p><p>​线程自旋是需要消耗 cup 的，说白了就是让 cup 在做无用功，如果一直获取不到锁，那线程也不能一直占用 cup 自旋做无用功，所以需要设定一个自旋等待的最大时间。如果持有锁的线程执行的时间超过自旋等待的最大时间仍没有释放锁，就会导致其它争用锁的线程在最大等待时间内还是获取不到锁，这时争用线程会停止自旋进入阻塞状态。</p><p><strong>Synchronized</strong> <strong>同步锁</strong></p><p>​synchronized 它可以把任意一个非 NULL 的对象当作锁。他属于独占式的悲观锁，同时属于可重入锁。</p><p>​1. 作用于方法时，锁住的是对象的实例(this)；</p><p>​2. 当作用于静态方法时，锁住的是Class实例，</p><p>​3. synchronized 作用于一个对象实例时，锁住的是所有以该对象为锁的代码块。</p><p><strong>ReentrantLock</strong></p><p>​ReentantLock 继承接口 Lock 并实现了接口中定义的方法，他是一种可重入锁，除了能完</p><p>成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等</p><p>避免多线程死锁的方法。</p><p><strong>公平锁（Fair）</strong></p><p>​加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得</p><p><strong>非公平锁（Nonfair）</strong></p><p>​加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待</p><ol><li><p>非公平锁性能比公平锁高 5~10 倍，因为公平锁需要在多核的情况下维护一个队列</p></li><li><p>Java 中的 synchronized 是非公平锁， ReentrantLock 默认的 lock()方法采用的是非公平锁。</p></li></ol><p><strong>ReadWriteLock</strong> <strong>读写锁</strong></p><p>​<strong>读锁</strong></p><p>​如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁</p><p>​<strong>写锁</strong></p><p>​如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！</p><p><strong>独占锁</strong></p><p>​独占锁模式下，每次只能有一个线程能持有锁， ReentrantLock 就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读&#x2F;读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。</p><p><strong>共享锁</strong></p><p>​共享锁则允许多个线程同时获取锁，并发访问共享资源，如： ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p><p><strong>Join</strong> <strong>等待其他线程终止</strong></p><p>​join() 方法，等待其他线程终止，在当前线程中调用一个线程的 join() 方法，则当前线程转为阻塞状态，回到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 cpu 的宠幸。</p><p> <strong>为什么要用 join()方法？</strong></p><p>​很多情况下，主线程生成并启动了子线程，需要用到子线程返回的结果，也就是需要主线程需要在子线程结束后再结束，这时候就要用到 join() 方法。</p><p><strong>拒绝策略</strong></p><p>​线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。JDK 内置的拒绝策略如下：</p><p>​1. AbortPolicy ：直接抛出异常，阻止系统正常运行</p><p>​2. CallerRunsPolicy ：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。</p><p>​ 3. DiscardOldestPolicy ：丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。</p><p>​ 4. DiscardPolicy ：该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</p><p><strong>线程与进程的区别？</strong></p><p>​进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。一个程序至少有一个进程,一个进程至少有一个线程。</p><p> <strong>什么是多线程中的上下文切换？</strong></p><p>​多线程会共同使用一组计算机上的 CPU，而线程数大于给程序分配的 CPU 数量时，为了让各个线程都有执行的机会，就需要轮转使用 CPU。不同的线程切换使用 CPU 发生的切换数据等就是上下文切换。</p><p><strong>死锁与活锁的区别，死锁与饥饿的区别？</strong></p><p>​<strong>死锁</strong>：是指两个或两个以上的进程（或线程）在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p><p>​<strong>产生死锁的必要条件：</strong></p><p>​1、互斥条件：所谓互斥就是进程在某一时间内独占资源。</p><p>​2、请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</p><p>​3、不剥夺条件:进程已获得资源，在末使用完之前，不能强行剥夺。</p><p>​4、循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p><p>​<strong>活锁：</strong>任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。</p><p>​活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”，而处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。</p><p>​<strong>饥饿：</strong>一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行的状态。</p><p>​<strong>Java</strong> <strong>中导致饥饿的原因：</strong></p><p>​1、高优先级线程吞噬所有的低优先级线程的 CPU 时间。</p><p>​2、线程被永久堵塞在一个等待进入同步块的状态，因为其他线程总是能在它之前持续地对该同步块进行访问。</p><p>​3、线程在等待一个本身也处于永久等待完成的对象(比如调用这个对象的 wait 方法)，因为其他线程总是被持续地获得唤醒。</p><p><strong>Java</strong> <strong>中用到的线程调度算法是什么？</strong></p><p>​采用时间片轮转的方式。可以设置线程的优先级，会映射到下层的系统上面的优先级上，如非特别需要，尽量不要用，防止线程饥饿。</p><p> <strong>JAVA</strong> <strong>阻塞队列原理</strong></p><p>​阻塞队列，关键字是阻塞，先理解阻塞的含义，在阻塞队列中，线程阻塞有这样的两种情况：</p><p>​当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放入队列。</p><p>​当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有空的位置，线程被自动唤醒</p><p><strong>JVM</strong> <strong>内存区域</strong></p><p>​JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区【JAVA 堆、方法区】、直接内存。</p><p>​<strong>Java堆（Heap）</strong>,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p><p>​<strong>方法区（Method Area）</strong>,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>​<strong>程序计数器（Program Counter Register）</strong>,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。</p><p>​<strong>JVM栈（JVM Stacks）</strong>,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</p><p>​<strong>本地方法栈（Native Method Stacks）</strong>,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p><p><strong>JVM</strong> <strong>类加载机制</strong></p><p>​JVM 类加载机制分为五个部分：加载，验证，准备，解析，初始化</p><p><strong>类加载器</strong></p><p>​启动类加载器、扩展类加载器、系统类加载器、用户自定义类加载器</p><p><strong>双亲委派</strong></p><p>​当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。</p><p><strong>类的生命周期</strong></p><p>​类的生命周期包括这几个部分，加载、连接、初始化、使用和卸载，其中前三部是类的加载的过程</p><p><strong>简述Java的对象结构</strong></p><p>​Java对象由三个部分组成：对象头、实例数据、对齐填充。</p><p>​对象头由两部分组成，第一部分存储对象自身的运行时数据：哈希码、GC分代年龄、锁标识状态、线程持有的锁、偏向线程ID（一般占32&#x2F;64 bit）。第二部分是指针类型，指向对象的类元数据类（即对象代表哪个类）。如果是数组对象，则对象头中还有一部分用来记录数组长度。</p><p>​实例数据用来存储对象真正的有效信息（包括父类继承下来的和自己定义的）</p><p>​对齐填充：JVM要求对象起始地址必须是8字节的整数倍（8字节对齐  )</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试八股--数据库</title>
      <link href="/2023/03/15/%E9%9D%A2%E8%AF%95%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/03/15/%E9%9D%A2%E8%AF%95%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>数据库事务的四个特性</strong></p><p>​<strong>原子性</strong>：事务包含的所有操作要么全部执行成功，要么全部失败回滚</p><p>​<strong>一致性</strong>：事务执行成功后，数据库所处的状态和它的业务规则是一致的。即数据不会被破坏。如A转账100元给B，不管操作是否成功，A和B账户总额是不变的。</p><p>​<strong>隔离性</strong>：一个事务不会被另一个事务影响，最理想的状态是等待一个事务执行完成后再执行另一个事务，但处于性能考虑，一般都需要事务并发执行，就要要求并发执行时不同的事务拥有各自的数据空间，它们的操作不会彼此产生干扰。</p><p>​<strong>持久性</strong>：一旦事务提交，他对数据库的改变是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p><strong>数据库的三范式</strong>：</p><p>​第一范式：列不可再分，确保数据库表字段的原子性</p><p>​第二范式：确保表中的每列都和主键有关。 第二范式是在第一范式的基础上还要满足：一是表必须有一个主键；二是非主键列必须完全依赖于主键，而不能只依赖于主键的一部分。</p><p>​第三范式：首先要满足第二范式，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p><p><strong>并发事务带来哪些问题？</strong></p><p>​<strong>脏读</strong> ：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。（脏读就是读未提交，读到一个未提交的数据）</p><p>​<strong>不可重复读</strong>：是指在对于数据库中的某行记录，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，另一个事务修改了数据并提交了。</p><p>​<strong>幻读：</strong>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p><p><strong>不可重复读和幻读的区别：</strong>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了</p><p><strong>事务的四个隔离级别</strong></p><p>​读未提交：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p><p>​读已提交：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p><p>​课重复读：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生 </p><p>​可串行化：<strong>：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读 </p><p><strong>什么是索引？</strong></p><p>​索引是存储引擎用于提高数据库表的访问速度的一种数据结构。</p><p><strong>索引的优缺点：</strong></p><p>​<strong>优点：</strong>加快数据的查找速度、为用来排序或者分组的字段添加索引，可以加快分组和排序的速度、加快表与表之间的连接</p><p>​<strong>缺点</strong>：建立索引需要占用物理空间、会降低表的增删改的效率，因为每次对表记录进行增删改，需要进行动态维护索引，导致增删改时间变长</p><p><strong>什么情况下需要建立索引？</strong></p><ol><li>经常用于查询的字段</li><li>经常用于连接的字段建立索引，可以加快连接的速度</li><li>经常需要排序的字段建立索引，因为索引已经排好序，可以加快排序查询速度</li></ol><p><strong>什么情况下不建议使用索引？</strong></p><p>​where条件中用不到的字段不适合建立索引</p><p>​表记录较少。比如只有几百条数据，没必要加索引。</p><p>​需要经常增删改。需要评估是否适合加索引</p><p>​参与列计算的列不适合建索引</p><p>​区分度不高的字段不适合建立索引，如性别，只有男&#x2F;女&#x2F;未知三个值。加了索引，查询效率也不会提高</p><p><strong>mysql 有4种不同的索引：</strong></p><p>​主键索引（PRIMARY）：数据列不允许重复，不允许为NULL，一个表只能有一个主键。</p><p>​唯一索引（UNIQUE）：数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。</p><p>​普通索引（INDEX）</p><p>​全文索引（FULLTEXT）</p><p><strong>常见索引原则有</strong></p><p>​1 最左前缀匹配原则：以最左边为起点的任何连续的索引都能匹配上。同时，遇到范围查询就会停止匹配</p><p>​2 为常用作为查询条件的字段建立索引</p><p>​3 更新频繁的字段不适合创建索引</p><p>​4 为经常需要排序、分组和联合操作的字段建立索引。</p><p>​5 尽量的扩展索引，不要新建索引</p><p>​6 区分度较低的列不适合创建索引</p><p><strong>B+树和B树的区别，以及为什么不使用B树，Hash索引？</strong></p><p>​B树也称B-树，多路平衡查找树</p><p>​B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</p><p>​B 树的叶子节点都是独立的。B+树的叶子节点有一条引用链指向与它相邻的叶子节点</p><p>​B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</p><p>​MySQL没有使用Hash表作为索引结构是因为：Hash 索引不支持顺序和范围查询不使用B树的原因：</p><p>​B+树的检索效率就很稳定<br>​B 树不管叶子节点还是非叶子节点，都会保存数据，所以每个结点能保存的索引值就很少，如果数据很大，只能增加树的高度，这样会降低性能。</p><p><strong>索引的底层实现原理和优化</strong></p><p>​B+树，经过优化的 B+树</p><p>​主要是在所有的叶子结点中增加了指向下一个叶子节点的指针，因此 InnoDB 建议为大部分表使用默认自增的主键作为主索引。</p><p><strong>SQL优化</strong></p><p>​1.查询语句尽量不要使用select*</p><p>​2.尽量减少子查询，使用关联查询（inner join，left join，right join）来代替</p><p>​3.减少使用IN或者NOT IN，使用exist, not exist或者关联查询来代替</p><ol start="4"><li><p>or的查询尽量用union或者union all代替(在确认没有重复数据或者不用剔除重复数据时，union all会更好)</p><p>5.尽量避免在where子句中使用!&#x3D;或&lt;&gt;操作符，否者将导致引擎放弃使用索引而进行全表扫描</p><p>6.尽量避免在where子句中对字段进行null值判断，否指将导致引擎放弃使用索引而进行全表扫描。如： select id from t where num is     null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： select id from t where num&#x3D;0</p></li></ol><p><strong>drop  delete  truncate的区别</strong></p><p>​delete和truncate只删除表中的数据而不删除表的结构，drop全都删除</p><p>​速度，一般来说：drop&gt;truncate&gt;delete</p><p>​delete语句是dml,事务提交之后才生效，即数据可以回滚truncate,drop是ddl, 操作立即生效,数据不会回滚</p><p><strong>大表如何优化？</strong></p><p>​<strong>限定数据的范围</strong>：禁止不带任何限制数据范围条件的查询语句比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内；</p><p>​<strong>读写分离：</strong>主库负责写，从库负责读。</p><p>​<strong>垂直分表：</strong>将一个表按照字段分成多个表，每个表存储其中一部分字段。</p><p>​垂直分表的优势：避免IO竞争减少锁表的概率，可以更好地提升热门数据的查询效率。。此外，垂</p><p>直分区可以简化表的结构，易于维护。 </p><p>​垂直拆分（分库、分表）的缺点：主键出现冗余，需要管理冗余列、事务的处理变得复杂、仍然存在单表数据量过大的问题</p><p>​<strong>水平分表：</strong>在同一个数据库内，把同一个表的数据按照一定规则拆分到多个表中。水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。</p><p>​水平分表的优势：解决了单表数据量过大的问题、避免IO竞争并减少锁表的概率</p><p><strong>分库分表之后id主键如何处理</strong></p><p>​分库分表后不能每个表的ID都是从1开始，所以需要一个全局ID，设置全局ID主要有以下几种方法：</p><p>​<strong>UUID</strong>：优点：本地生成ID，不需要远程调用；全局唯一不重复。缺点：占用空间大，不适合作为索引。</p><p>​<strong>数据库自增</strong> <strong>id :</strong> 两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。这种方式生成的 id 有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。</p><p>​<strong>利用</strong> <strong>redis</strong> <strong>生成</strong> <strong>id :</strong> 性能比较好，灵活方便，不依赖于数据库。但是，引入了新的组件造成系统更加复杂，可用性降低，编码更加复杂，增加了系统成本。</p><p>​<strong>Twitter的雪花算法</strong></p><p><strong>存储过程（特定功能的SQL语句集）</strong></p><p>​一组为了完成特定功能的 SQL 语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。</p><p><strong>MySQL</strong> <strong>中有哪几种锁？</strong></p><p>​1.表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>​    2.行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>​    3.页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><p><strong>锁的优化策略</strong></p><p>​1、读写分离</p><p>​2、分段加锁</p><p>​3、减少锁持有的时间</p><p>​4.多个线程尽量以相同的顺序去获取资源不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效率不如一次加一把大锁。 </p><p><strong>实践中如何优化</strong> <strong>MySQL</strong></p><p>​最好是按照以下顺序优化：</p><p>​1、SQL 语句及索引的优化</p><p>​2、数据库表结构的优化</p><p>​3、系统配置的优化</p><p>​4、硬件的优化</p><p><strong>解释</strong> <strong>MySQL</strong> <strong>外连接、内连接与自连接的区别</strong></p><p>先说什么是交叉连接: 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。</p><p>内连接 则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。</p><p>外连接 其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。</p><p>左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对</p><p>应的那些字段值以NULL 来填充。右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换，MySQL 目前还不支持全外连接。</p><p><strong>数据库引擎有哪些</strong></p><p>​ <strong>MYISAM</strong>：全表锁，拥有较高的执行速度，不支持事务，不支持外键，并发性能差，占用空间相对较小，对事务完整性没有要求，以select、insert为主的应用基本上可以使用这引擎</p><p>​<strong>Innodb</strong>:行级锁，提供了具有提交、回滚和崩溃回复能力的事务安全，支持自动增长列，支持外键约束，并发能力强，占用空间是MYISAM的2.5倍，处理效率相对会差一些</p><p>​<strong>Memory</strong>:全表锁，存储在内容中，速度快，但会占用和数据量成正比的内存空间且数据在mysql重启时会丢失，默认使用HASH索引，检索效率非常高，但不适用于精确查找，主要用于那些内容变化不频繁的代码表</p><p>​<strong>merge</strong>:是一组MYISAM表的组合</p><p><strong>Innodb和MYISAM的区别</strong>？</p><p>​1. InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</p><ol start="2"><li><p>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败；</p></li><li><p>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</p></li><li><p>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</p></li><li><p>Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高；</p></li></ol><p><strong>如何选择引擎？</strong></p><p>​如果没有特别的需求，使用默认的 Innodb 即可。</p><p>​MyISAM：以读写插入为主的应用程序，比如博客系统、新闻门户网站。</p><p>​Innodb：更新（删除）操作频率也高，或者要保证数据的完整性；并发量高，支持事务和外键。比如OA自动化办公系统。</p><p><strong>Redis</strong> <strong>与其他</strong> <strong>key - value</strong> <strong>缓存产品有以下三个特点：</strong></p><p>​Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p><p>​Redis 不仅仅支持简单的 key-value 类型的数据，还提供 list，set，zset，hash 等数据结构的存储。</p><p>​Redis 支持数据的备份，即 master-slave 模式的数据备份。</p><p><strong>使用</strong> <strong>Redis</strong> <strong>有哪些好处？</strong></p><p>​速度快，因为数据存在内存中</p><p>​支持丰富数据类型，支持 string，list，set，Zset，hash 等</p><p>​支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p><p>​丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除</p><p><strong>如何保证 Redis 的高并发？</strong></p><p>​Redis 通过<strong>主从加集群</strong>架构，实现读写分离，主节点负责写，并将数据同步给其他从节点，从节点负责读，从而实现高并发。</p><p><strong>redis持久化机制</strong></p><p>​Redis是一个支持持久化的内存数据库，通过持久化机制把内存中的数据同步到硬盘文件来保证数据持久化。当Redis重启后通过把硬盘文件重新加载到内存，就能达到恢复数据的目的。</p><p><strong>缓存雪崩：</strong></p><p>​原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。</p><p>​ <strong>解决办法</strong>：用加锁（ 最多的解决方案）或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。还有一个简单方案就时讲缓存失效时间分散开。</p><p><strong>缓存穿透：</strong></p><p>​业务系统要查询的数据根本就存在！当业务系统发起查询时，按照流程，首先会前往缓存中查询，由于缓存中不存在，然后再前往数据库中查询。由于该数据压根就不存在，因此数据库也返回空。这就是缓存穿透。</p><p>​ <strong>解决方案：</strong></p><p>​1.缓存空数据将数据库查询结果为空的key也存储在缓存中。当后续又出现该key的查询请求时，缓存直接返回null，而无需查询数据库。</p><p>​2.使用BloomFilter<strong>布隆过滤器（推荐）</strong>： 它需要在缓存之前再加一道屏障，里面存储目前数据库中存在的所有key，当业务系统有查询请求的时候，首先去BloomFilter中查询该key是否存在。若不存在，则说明数据库中也不存在该数据，因此缓存都不要查了，直接返回null。若存在，则继续执行后续的流程，先前往缓存中查询，缓存中没有的话再前往数据库中的查询。</p><p><strong>缓存预热</strong> ：</p><p>​缓存预热这个应该是一个比较常见的概念，相信很多小伙伴都应该可以很容易的理解，缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p>​<strong>解决思路：</strong></p><p>​1、直接写个缓存刷新页面，上线时手工操作下；</p><p>​2、数据量不大，可以在项目启动的时候自动进行加载；</p><p>​3、定时刷新缓存</p><p><strong>缓存更新</strong>：</p><p>​除了缓存服务器自带的缓存失效策略之外，我们还可以根据具体的业务需求进行自定义的缓存淘汰，常</p><p>见的策略有两种：</p><p>​（1）定时去清理过期的缓存；</p><p>​（2）当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</p><p><strong>缓存降级</strong>：</p><p>​为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略</p><p><strong>单线程的为什么这么快</strong>？</p><p>​(1)纯内存操作</p><p>   (2)单线程操作，避免了频繁的上下文切换</p><p>   (3)采用了非阻塞I&#x2F;O多路复用机制</p><p><strong>redis有哪些应用场景</strong></p><p>​1）<strong>String</strong>：缓存、限流、分布式锁、计数器、分布式 Session 等。</p><p>​2）<strong>Hash</strong>：用户信息、用户主页访问量、组合查询等。</p><p>​3）<strong>List</strong>：简单队列、关注列表时间轴。</p><p>​4）<strong>Set</strong>：赞、踩、标签等。</p><p>​5）<strong>ZSet</strong>：排行榜、好友关系链表。</p><p><strong>redis过期策略</strong></p><p>​redis采用的是定期删除+惰性删除策略。</p><p><strong>Redis</strong> <strong>常见性能问题和解决方案？</strong></p><p>​(1) Master 最好不要做任何持久化工作，如 RDB 内存快照和 AOF 日志文件</p><p>​(2) 如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次</p><p>​(3) 为了主从复制的速度和连接的稳定性， Master 和 Slave 最好在同一个局域网内</p><p>​(4) 尽量避免在压力很大的主库上增加从库</p><p>​(5) 主从复制不要用图状结构，用单向链表结构更为稳定，</p><p><strong>redis事务</strong></p><p>​redis 不支持回滚“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”，所以 Redis 的内部可以保持简单且快速。</p><p>​如果在一个事务中的命令出现错误，那么所有的命令都不会执行；</p><p>​如果在一个事务中出现运行错误，那么正确的命令会被执行。</p><p><strong>Redis</strong> <strong>支持的</strong> <strong>Java</strong> <strong>客户端都有哪些？官方推荐用哪个？</strong></p><p>​Redisson、Jedis、lettuce 等等，官方推荐使用 Redisson。</p><p><strong>Redis</strong> <strong>如何做内存优化？</strong></p><p>​1.使用合适的数据结构、合理设置过期时间</p><p>​2.避免大对象：如果一个键值对的值很大，会导致Redis分配大量内存。因此，需要避免存储过大的对象，可以将大对象拆分为多个小<a href="https://so.csdn.net/so/search?q=%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8&spm=1001.2101.3001.7020">对象存储</a>，或者采用分布式存储等方式。</p><p>​3.尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。</p><p><strong>Redis</strong> <strong>最适合的场景</strong></p><p>​会话缓存、全页缓存、队列、排行榜&#x2F;计数器、发布、订阅</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试八股--spring</title>
      <link href="/2023/03/15/%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/03/15/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>​                                                    </p><p>​                                                         <strong>谈谈对于spring的理解</strong></p><p>​spring是一个开源的，为简化企业级应用开发而生的一个IOC和AOP容器框架</p><p><strong>Spring容器的主要核心是：</strong></p><p>​控制反转（IOC）：传统的Java开发模式中，当我们需要一个对象时，我们会自己new或者利用反射等直接或者间接调用构造方法去创建一个对象。而在spring开发模式中，spring容器使用了工厂模式为我们创建了所需要的对象。就是说，我们只需要在spring配置文件中配置相应的bean，以及设置相关的属性，让spring容器来生成类的实例对象以及去管理对象，在spring容器启动的时候，spring会把在配置文件中配置好的bean都初始化好，然后在我们需要调用的时候，他就会把初始化好的bean分配给我们需要调用这些bean的类。</p><p>​依赖注入（DI）：spring使用javaBean对象的set方法或者带参数的构造方法为我们在创建所需对象时将其属性自动设置所需要值的过程，就是依赖注入的思想。</p><p>​面向切面编程（AOP）：在我们的程序中，有很多大量重复的交叉的业务代码。把这些代码封装成一个公共的模块，或者说横向的抽成一个切面。然后利用动态代理或者静态织入的方式注入到目标对中。动态代理技术就是利用截取消息的方式，对该消息就行装饰，取代原有对象行为的执行。</p><p>​<strong>谈谈对于springMVC的理解</strong> </p><p>​它是在Servlet基础上构建然后利用MVC模式设计的一个WEB框架。主要目的是简化传统的Servlet+JSP模式下的WEB开发方式。 它把传统的MVC框架里面的Controller控制器做了拆分，分成了前端控制器DispatcherServlet和后端控制器Controller， 把Model模型层拆分成了业务层service和数据访问层Repository，在视图层可以支持不同的视图，比如FreeMark、JSP等。</p><p>​springMVC的核心工作流程是，浏览器的请求首先会经过前端控制器DispatcherServlet，它负责把请求分发到对应的Controller.在Controller里面处理完业务逻辑之后，返回ModelAndView。然后DispatcherServlet会将ModelAndView传给ViewResolver视图解析器，解析后返回具体的View，DispatcherServlet会根据View进行渲染视图。最后把数据响应给客户端。</p><p>​<strong>谈谈对MyBatis的理解</strong></p><p>​mybatis是一个开源的、轻量级的数据持久化框架。它内部封装了JDBC，简化了加载驱动、创建连接等繁琐的过程，开发者只需要关注SQL语句的本身。</p><p>​优点：1.简单易学  2.灵活（mybatis不会对应用程序或者数据库的现有设计强加任何影响。SQL写在xml里，便于统一管理和优化。通过SQL语句可以满足操作数据库的所有需求） 3.解除SQL与程序代码的耦合   4.与jdbc相比，减少了代码量消除了jdbc大量的冗余代码，不需要手动开关连接  5.很好的与各种数据库兼容，因为mybatis内部使用jdbc来连接数据库，所以jdbc支持的数据库mybatis都支持。</p><p>​                                                     <strong>MyBatisPlus</strong></p><p>​在mybatis的基础上只做增强不做改变。特点：</p><p>​<strong>强大的CRUD操作</strong>：内置通用的Mapper(BaseMapper)、通用Service(Iservice)，可以实现大部分的单表增删改查，还有条件构造器，满足很多条件的使用需求。                                                                                   </p><p>​<strong>支持Lambda形式调用</strong>：通过lambda表达式，方便编写各类条件查寻，不需要担心写错字段                   </p><p>​<strong>内置代码生成器、内置分页插件</strong>（基于mybatis物理分页）、<strong>内置全局拦截插件</strong>：提供全表的delete、update操作智能分析阻断，也可自定义拦截规则，预防误操作。</p><p>​                                                     <strong>谈谈对springboot的理解</strong></p><p>​springboot是一个简化spring开发的框架，它约定大于配置，去繁就简，可以快速构建和启动springweb项目。优点：</p><p>​<strong>独立运行</strong>：springboot内嵌了各种Servlet容器，Tomcat、jetty等。不需要在打成war包部署到容器中，只需要打成一个可执行的jar包就能独立运行，所有的依赖都在一个jar包内。                                        </p><p>​<strong>简化配置</strong>：spring-boot-starter-web启动器自动依赖其他组件，简少了maven的配置、以及一些XML文件的配置。避免了大量的maven导入和各种版本冲突。        </p><p>​<strong>自动配置：</strong>针对很多spring应用程序常见的应用功能，springboot能自动提供相关配置，如添加一个spring-boot-starter-web启动器就能拥有web的功能，无需其他配置。</p><p>​<strong>端点监控</strong>：springboot能对正在运行的项目提供监控。</p><p><strong>核心注解</strong>：@SpringBootApplication ：是springboot项目的核心注解，用于开启自动配置。</p><p>​@EnableAutoConfiguration:主要功能是启动spring应用程序上下文时进行自动配置，他会尝试猜测并配置项目可能需要的bean。</p><p>​</p><p><strong>常见的依赖注入</strong>：构造函数注入、setter注入、接口注入（在 Spring Framework 中，仅使用构造函数和 setter 注入）构造函数注入没有部分注入，适用于设置很多属性，对象初始化完成后便可获得可使用的对象。setter注入有部分注入适用于设置少量属性，灵活可以选择性的注入需要的对象。</p><p><strong>spring提供哪些配置方式</strong>：基于xml配置、基于注解配置、基于Java API配置</p><p><strong>spring bean是什么</strong></p><p>​在spring中，构成应用程序主干并由springIOC容器管理的对象称为bean，bean是一个有IOC容器实例化、组装和管理的对象。（Bena是对象，一个或者多个不限定、我们的应用程序由一个个bean组成）</p><p><strong>什么是spring的内部bean？</strong></p><p>​将一个bean作用与另一个bean的属性时，才能将bean声明为内部bean。如我们有一个Student类，其中引入了Person类，这里我们将只创建一个Person类实列，并在Student中使用它</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">private</span> Person person<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Setters and Getters</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> String address<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Setters and Getters</span><span class="token punctuation">}</span></code></pre><p><strong>@autowired和@Resource的区别</strong></p><p>​@Resource和@Autowired都是做bean的注入时使用。</p><p>​@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果想按照名称（byName）来装配，可以结合@Qualifier注解一起使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​@resource默认按照ByName自动注入，它有两个重要属性name和type，spring将@Resource注解的name属性解析为bean的名字，type属性解析成bean的类型</p><p>@Resource装配顺序：</p><p>①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</p><p>②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</p><p>③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常 </p><p>④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</p><p><strong>spring框架中用到了那些设计模式</strong></p><p>​工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例</p><p>​单例模式：Bean默认为单例模式</p><p>​代理模式：spring的AOP采用了动态代理</p><p>​模板方法：用来解决代码重复的问题。如RestTemplate</p><p>​观察者模式：一个对象的行为依赖于另一个对象的状态，就是说被观察对象（目标对象）的状态发生改变时，会直接影响到观察对象的行为。定义对象建立一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新</p><p><strong>Spring循环依赖的三种方式以及解决办法</strong>s</p><p>​<a href="https://so.csdn.net/so/search?q=%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96&spm=1001.2101.3001.7020">循环依赖</a>其实就是循环引用，也就是两个或者两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于C，C又依赖于A。如下图：</p><p><img src="/2023/03/15/%E9%9D%A2%E8%AF%95/image-20230323203329583.png"></p><p><img src="/2023/03/15/%E9%9D%A2%E8%AF%95/image-20230323203202979-16801890840901.png"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// A中注入了B</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> B b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// B中注入了A</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> A a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">// 自己依赖自己</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// C中注入了C</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> C c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Spring中循环依赖场景有： </p><p>（1）构造器的循环依赖 </p><p>（2）field属性的循环依赖</p><p>其中，构造器的循环依赖问题无法解决，只能拋出BeanCurrentlyInCreationException异常，在解决属性循环依赖时，spring采用的是提前暴露对象的方法。</p><p>​<strong>怎么检测是否存在循环依赖</strong></p><p>​检测循环依赖相对比较容易，Bean在创建的时候可以给该Bean打标，如果<a href="https://so.csdn.net/so/search?q=%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8&spm=1001.2101.3001.7020">递归调用</a>回来发现正在创建中的话，即说明了循环依赖了。</p><p>1：构造器的循环依赖。【这个Spring解决不了】</p><p>　　Spring容器会将每一个正在创建的Bean 标识符放在一个“当前创建Bean池”中，Bean标识符在创建过程中将一直保持在这个池中，因此如果在创建Bean过程中发现自己已经在“当前创建Bean池”里时将抛出BeanCurrentlyInCreationException异常表示循环依赖；而对于创建完毕的Bean将从“当前创建Bean池”中清除掉。</p><p>　　Spring容器先创建单例A，A依赖B，然后将A放在“当前创建Bean池”中，此时创建B,B依赖C ,然后将B放在“当前创建Bean池”中,此时创建C，C又依赖A， 但是，此时A已经在池中，所以会报错，因为在池中的Bean都是未初始化完的，所以会依赖错误 ，（初始化完的Bean会从池中移除）</p><p>​<strong>什么情况下循环依赖可以被处理？</strong></p><p>​Spring解决循环依赖是有<strong>前置条件</strong>的</p><ul><li>出现循环依赖的Bean必须要是<strong>单例</strong>(singleton)，如果依赖prototype则完全不会有此需求。</li><li>依赖注入的方式<strong>不能全是</strong>构造器注入的方式（只能解决setter方法的循环依赖，这是错误的）</li></ul><table><thead><tr><th>依赖情况</th><th>依赖注入方式</th><th>是否解决</th></tr></thead><tbody><tr><td>AB相互依赖（循环依赖）</td><td>均采用setter方法注入</td><td>是</td></tr><tr><td>AB相互依赖（循环依赖）</td><td>均采用属性自动注入</td><td>是</td></tr><tr><td>AB相互依赖（循环依赖）</td><td>均采用构造器注入</td><td>否</td></tr><tr><td>AB相互依赖（循环依赖）</td><td>A中注入B的方式为setter方法，B中注入A的方式为构造器</td><td>是</td></tr><tr><td>AB相互依赖（循环依赖）</td><td>B中注入A的方式为setter方法，A中注入B的方式为构造器,Spring在创建Bean时默认会根据自然排序进行创建，A会先于B进行创建</td><td>否</td></tr></tbody></table><p>从上面的测试结果我们可以看到，<strong>不是只有在setter方法注入的情况下循环依赖才能被解决，即使存在构造器注入的场景下，循环依赖依然被可以被正常处理掉</strong>。</p><p><strong>Spring如何解决循环依赖的</strong></p><p>​Spring通过三级缓存解决了循环依赖，其中一级缓存为单例池（singletonObjects），二级缓存为早期曝光对象earlySingletonObjects，三级缓存为早期曝光对象工厂（singletonFactories）。</p><p>当A、B两个类发生循环引用时，在A完成实例化后，就使用实例化后的对象去创建一个<code>对象工厂</code>，添加到三级缓存中，如果A被AOP代理，那么通过这个工厂获取到的就是A<code>代理后</code>的对象，如果A没有被AOP代理，那么这个工厂获取到的就是A实例化的对象。</p><p>当A进行属性注入时，会去创建B，同时B又依赖了A，所以创建B的同时又会去调用getBean(a)来获取需要的依赖，此时的getBean(a)会从缓存中获取：</p><blockquote><p>❝</p><p>第一步：先获取到三级缓存中的工厂；</p><p>第二步：调用对象工工厂的getObject方法来获取到对应的对象，得到这个对象后将其注入到B中。紧接着B会走完它的生命周期流程，包括初始化、后置处理器等。</p><p>第三步：当B创建完后，会将B再注入到A中，此时A再完成它的整个生命周期。至此，循环依赖结束！</p><p>❞</p></blockquote><p><strong>什么要使用三级缓存呢？二级缓存能解决循环依赖吗？</strong></p><p>​❝</p><blockquote><p>答：如果要使用二级缓存解决循环依赖，意味着所有Bean在实例化后就要完成AOP代理，这样<code>违背了Spring设计的原则</code>，Spring在设计之初就是通过AnnotationAwareAspectJAutoProxyCreator这个后置处理器来在Bean生命周期的最后一步来完成AOP代理，而不是在实例化后就立马进行AOP代理。</p><p>❞</p></blockquote><p><strong>get请求与post请求的区别</strong></p><p>1、get 和 post请求是<a href="https://so.csdn.net/so/search?q=http%E5%8D%8F%E8%AE%AE&spm=1001.2101.3001.7020">http协议</a>中的两种请求方式。</p><p> 2、get一般用来获取服务器的信息的，post一般是用来更新信息。</p><p>​<strong>区别</strong></p><p>​1、 get请求一般用来请求获取数据</p><p>​  post请求一般作为发送数据到后台，传递数据，创建数据</p><p>​2、 get请求也可以传参到后台，但是传递的参数则显示在地址栏，安全性低，且参数的长度也有限制（2048字符）</p><p>​ post请求则是将传递的参数放在request body中，不会在地址栏显示，安全性比get请求高，参数没有长度限制</p><p>​3、get请求刷新浏览器或者回退没有影响</p><p>​ post请求则会重新请求一遍</p><p>​4、get请求可以被缓存，也会保留在浏览器的历史记录中</p><p>​  post请求不会被缓存，也不好保留在浏览器的历史记录中</p><p>​5、get请求通常是通过url地址请求</p><p>​    post常见的则是form表单请求</p><p>​6、get比post更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p><p>​<strong>特别</strong></p><p>​对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>​而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p><strong>运行Spring Boot有哪几种方式</strong></p><p>​打包用命令或者放到容器中运行、用Maven插件运行、直接执行main方法</p><p><strong>如何理解spring boot中的starters？</strong></p><p>​starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成spring及其他技术，而不需要到处找示例代码和依赖包。如 你想使用Spring JPA访问数据库，只要加入springboot-starter-data-jpa启动器依赖就能使用了。 Spring Boot官方的启动器都是以spring-boot-starter-命名的，代表了一个特定的应用类型。第三方的启动器不能以spring-boot开头命名，它们都被Spring Boot官方保留。一般一个第三方的应该这样命名，像mybatis的mybatis-spring-boot-starter。</p><p><strong>spring boot中的监视器是什么</strong></p><p>​Spring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。</p><p><strong>如何使用spring boot实现异常处理</strong></p><p>​spring提供了一种使用@ControllerAdvice处理异常的非常有用的方法，来处理控制器类抛出的异常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//异常处理</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//全局异常处理执行的方法</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行全局异常处理！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//特定异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">error</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行了特定异常处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//自定义异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>FeiException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">error</span><span class="token punctuation">(</span>FeiException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>spring boot配置加载顺序</strong></p><p>​1.properties文件     2.YAML文件    3.系统环境变量   4.命令行参数</p><p><strong>mybatis中，当实体类中的属性名和表中的字段名不一致时怎么办</strong>？</p><p>​1.通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>”selectorder”</span> <span class="token attr-name">parametertype</span><span class="token attr-value"><span class="token punctuation">=</span>”int”</span><span class="token attr-name">resultetype</span><span class="token attr-value"><span class="token punctuation">=</span>”me.gacl.domain.order”</span><span class="token punctuation">></span></span>        select order_id id, order_no orderno ,order_price price form orders whereorder_id=#{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>​2.通过映射字段名和实体类属性名的一一对应关系</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getOrder<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderresultmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from orders where order_id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>”me.gacl.domain.order”</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>”orderresultmap”</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–用id属性来映射主键字段–</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span>”id”</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span>”order_id”</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–</span><span class="token punctuation">></span></span>        &lt;result property = “orderno” column =”order_no”/>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span>”price”</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span>”order_price”</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reslutMap</span><span class="token punctuation">></span></span></code></pre><p>在mybatisPlus中还可以使用：</p><p>​@TableName(value &#x3D; …) 当数据库名和实体类名不一致时或者是不符合驼峰命名时，需要此注解指定表名</p><p>​@TableField解决实体类的属性名和数据库的字段名不匹配的问题、实体类的属性字段在表中不存在的问题（如果实体类属性表中没有对应的字段，使用@TableField(exist &#x3D; false))</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"sys_dept"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysDept</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"部门名称"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"上级部门id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"parent_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long parentId<span class="token punctuation">;</span>        <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//字段不存在情况</span>    <span class="token keyword">private</span> String no<span class="token punctuation">;</span></code></pre><p><strong>mybatis实现分页功能：</strong></p><p>​1.全部结果查询出来，在进行分页，但是效率不高</p><p>​2.通过SQL语句实现，查询时在SQL语句后面添加<strong>limit</strong>分页语句</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryStuentBySql<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student limit #{index} , #{pagesize} //index 要开始查询的第一条记录的索引<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   //pagesize 要查询的记录数</code></pre><p>​3.用RowBounds分页，创建RowBounds对象，使用有参传开始的条数（（page -1）*pagesize）和每页几条数据(pagesize)，调用mapper方法讲RowBounds对象传递进去 （不推荐）</p><p>​4.使用pageHelper插件分页、主要是通过mybatis拦截器实现的</p><p><strong>mybatisPlus实现分页</strong></p><p>​使用分页插件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分页插件配置     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PaginationInnerInterceptor innerInterceptor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerInterceptor<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        innerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>innerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> mybatisConfiguration <span class="token operator">-</span><span class="token operator">></span> mybatisConfiguration<span class="token punctuation">.</span><span class="token function">setUseGeneratedShortKey</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>service实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> SysUserMapper sysUserMapper<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> JsonData <span class="token function">getUserPage</span><span class="token punctuation">(</span>Integer pageNum<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Page<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> getUser <span class="token operator">=</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">getUserPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>getUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其中，IPage是分页的关键，将我们需要分页的条件用Page处理，即可达到分页效果</p><p><strong>如何实现批量插入</strong></p><p>​1.单次循环插入</p><p>​2.通过foreach标签批量插入</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.buhe.demo.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO tb_student (name, age, phone, address, class_id) VALUES (#{name},#{age},#{phone},#{address},#{classId})  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- java项目www.fhadmin.org --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO tb_student (name, age, phone, address, class_id) VALUES    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        (#{item.name},#{item.age},#{item.phone},#{item.address},#{item.classId})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>​3.批处理</p><p><strong>mybatis实现一对一有几种方式？</strong></p><p>​有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap里面配置association节点配置一对一的类就可以完成。嵌套查询是先查一个表，根据这个表里面的结果的 外键id，去再另外一个表里面查询数据,也是通过association配置，但另外一个表的查询通过select属性配置。</p><p><strong>mybatis的一级、二级缓存</strong></p><p>​一级缓存是基于PerpetualCache的HashMap本地缓存。其作用域为sesion，当Session flush或者close之后，该session中的所有缓存将清空，默认打开一级缓存</p><p>​二级缓存与一级缓存机制相同，默认也是采用PerpetualCache的HashMap存储，他存储作用域为Mapper（NameSpace），并且可以自定义存储源。默认不打开二级缓存。要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/2023/03/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Java如何解决跨域问题？"><a href="#Java如何解决跨域问题？" class="headerlink" title="Java如何解决跨域问题？"></a><strong>Java如何解决跨域问题？</strong></h4><p>​我们在开发过程中经常会遇到<a href="https://so.csdn.net/so/search?q=%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB&spm=1001.2101.3001.7020">前后端分离</a>而导致的跨域问题，导致无法获取返回结果。跨域就像分离前端和后端的一道鸿沟，君在这边，她在那边，两两不能往来.</p><p><strong>什么是跨域</strong></p><p>跨域（CORS）是指不同域名之间相互访问。跨域，指的是浏览器不能执行其他网站的脚本，它是由浏览器的<a href="https://so.csdn.net/so/search?q=%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5&spm=1001.2101.3001.7020">同源策略</a>所造成的，是浏览器对于JavaScript所定义的安全限制策略。</p><p><strong>什么情况下会跨域</strong></p><ul><li>同一协议， 如http或https</li><li>同一IP地址, 如127.0.0.1</li><li>同一端口, 如8080</li></ul><p>以上三个条件中有一个条件不同就会产生跨域问题。</p><p><strong>前端解决方案</strong></p><p>​1.使用JSONP方式实现跨域调用；</p><p>​2.使用NodeJS服务器做为服务代理，前端发起请求到NodeJS服务器， NodeJS服务器代理转发请求到后端服务器；</p><p><strong>后端解决方案</strong></p><p>​1.Nginx反向代理解决跨域问题</p><p>​2.使用使用@CrossOrigin注解，在需要跨域访问的类和方法中设置允许跨域访问(标注在controller类的方法上或者controller类上)</p><p>​<strong>在controller使用</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​<strong>在具体接口上使用</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@CrossOrigin</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​3.继承使用Spring Web的CorsFilter（适用于Spring MVC、Spring Boot）</p><p>​</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>CorsConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>UrlBasedCorsConfigurationSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CorsFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1,允许任何来源，这里可以线上填写具体允许的域名</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span> <span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2,允许任何请求头</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span>CorsConfiguration<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3,允许任何方法</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span>CorsConfiguration<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4,允许凭证</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​4.实现WebMvcConfigurer接口（适用于Spring Boot）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//标注这个类是一个配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//实现 WebMvcConfigurer 接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>         registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置允许跨域访问的路径</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置允许跨域访问的源</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//允许跨域请求的方法</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">168000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//预检间隔时间</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//允许头部设置</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否发送 cookie</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
