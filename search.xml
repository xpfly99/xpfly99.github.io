<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试八股--spring</title>
      <link href="/2023/03/15/%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/03/15/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>​                                                    </p><p>​                                                         <strong>谈谈对于spring的理解</strong></p><p>​spring是一个开源的，为简化企业级应用开发而生的一个IOC和AOP容器框架</p><p><strong>Spring容器的主要核心是：</strong></p><p>​控制反转（IOC）：传统的Java开发模式中，当我们需要一个对象时，我们会自己new或者利用反射等直接或者间接调用构造方法去创建一个对象。而在spring开发模式中，spring容器使用了工厂模式为我们创建了所需要的对象。就是说，我们只需要在spring配置文件中配置相应的bean，以及设置相关的属性，让spring容器来生成类的实例对象以及去管理对象，在spring容器启动的时候，spring会把在配置文件中配置好的bean都初始化好，然后在我们需要调用的时候，他就会把初始化好的bean分配给我们需要调用这些bean的类。</p><p>​依赖注入（DI）：spring使用javaBean对象的set方法或者带参数的构造方法为我们在创建所需对象时将其属性自动设置所需要值的过程，就是依赖注入的思想。</p><p>​面向切面编程（AOP）：在我们的程序中，有很多大量重复的交叉的业务代码。把这些代码封装成一个公共的模块，或者说横向的抽成一个切面。然后利用动态代理或者静态织入的方式注入到目标对中。动态代理技术就是利用截取消息的方式，对该消息就行装饰，取代原有对象行为的执行。</p><p>​<strong>谈谈对于springMVC的理解</strong> </p><p>​它是在Servlet基础上构建然后利用MVC模式设计的一个WEB框架。主要目的是简化传统的Servlet+JSP模式下的WEB开发方式。 它把传统的MVC框架里面的Controller控制器做了拆分，分成了前端控制器DispatcherServlet和后端控制器Controller， 把Model模型层拆分成了业务层service和数据访问层Repository，在视图层可以支持不同的视图，比如FreeMark、JSP等。</p><p>​springMVC的核心工作流程是，浏览器的请求首先会经过前端控制器DispatcherServlet，它负责把请求分发到对应的Controller.在Controller里面处理完业务逻辑之后，返回ModelAndView。然后DispatcherServlet会将ModelAndView传给ViewResolver视图解析器，解析后返回具体的View，DispatcherServlet会根据View进行渲染视图。最后把数据响应给客户端。</p><p>​<strong>谈谈对MyBatis的理解</strong></p><p>​mybatis是一个开源的、轻量级的数据持久化框架。它内部封装了JDBC，简化了加载驱动、创建连接等繁琐的过程，开发者只需要关注SQL语句的本身。</p><p>​优点：1.简单易学  2.灵活（mybatis不会对应用程序或者数据库的现有设计强加任何影响。SQL写在xml里，便于统一管理和优化。通过SQL语句可以满足操作数据库的所有需求） 3.解除SQL与程序代码的耦合   4.与jdbc相比，减少了代码量消除了jdbc大量的冗余代码，不需要手动开关连接  5.很好的与各种数据库兼容，因为mybatis内部使用jdbc来连接数据库，所以jdbc支持的数据库mybatis都支持。</p><p>​                                                     <strong>MyBatisPlus</strong></p><p>​在mybatis的基础上只做增强不做改变。特点：</p><p>​<strong>强大的CRUD操作</strong>：内置通用的Mapper(BaseMapper)、通用Service(Iservice)，可以实现大部分的单表增删改查，还有条件构造器，满足很多条件的使用需求。                                                                                   </p><p>​<strong>支持Lambda形式调用</strong>：通过lambda表达式，方便编写各类条件查寻，不需要担心写错字段                   </p><p>​<strong>内置代码生成器、内置分页插件</strong>（基于mybatis物理分页）、<strong>内置全局拦截插件</strong>：提供全表的delete、update操作智能分析阻断，也可自定义拦截规则，预防误操作。</p><p>​                                                     <strong>谈谈对springboot的理解</strong></p><p>​springboot是一个简化spring开发的框架，它约定大于配置，去繁就简，可以快速构建和启动springweb项目。优点：</p><p>​<strong>独立运行</strong>：springboot内嵌了各种Servlet容器，Tomcat、jetty等。不需要在打成war包部署到容器中，只需要打成一个可执行的jar包就能独立运行，所有的依赖都在一个jar包内。                                        </p><p>​<strong>简化配置</strong>：spring-boot-starter-web启动器自动依赖其他组件，简少了maven的配置、以及一些XML文件的配置。避免了大量的maven导入和各种版本冲突。        </p><p>​<strong>自动配置：</strong>针对很多spring应用程序常见的应用功能，springboot能自动提供相关配置，如添加一个spring-boot-starter-web启动器就能拥有web的功能，无需其他配置。</p><p>​<strong>端点监控</strong>：springboot能对正在运行的项目提供监控。</p><p><strong>核心注解</strong>：@SpringBootApplication ：是springboot项目的核心注解，用于开启自动配置。</p><p>​@EnableAutoConfiguration:主要功能是启动spring应用程序上下文时进行自动配置，他会尝试猜测并配置项目可能需要的bean。</p><p>​</p><p><strong>常见的依赖注入</strong>：构造函数注入、setter注入、接口注入（在 Spring Framework 中，仅使用构造函数和 setter 注入）构造函数注入没有部分注入，适用于设置很多属性，对象初始化完成后便可获得可使用的对象。setter注入有部分注入适用于设置少量属性，灵活可以选择性的注入需要的对象。</p><p><strong>spring提供哪些配置方式</strong>：基于xml配置、基于注解配置、基于Java API配置</p><p><strong>spring bean是什么</strong></p><p>​在spring中，构成应用程序主干并由springIOC容器管理的对象称为bean，bean是一个有IOC容器实例化、组装和管理的对象。（Bena是对象，一个或者多个不限定、我们的应用程序由一个个bean组成）</p><p><strong>什么是spring的内部bean？</strong></p><p>​将一个bean作用与另一个bean的属性时，才能将bean声明为内部bean。如我们有一个Student类，其中引入了Person类，这里我们将只创建一个Person类实列，并在Student中使用它</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span> Person person<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Setters and Getters</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> String address<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Setters and Getters</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>@autowired和@Resource的区别</strong></p><p>​@Resource和@Autowired都是做bean的注入时使用。</p><p>​@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果想按照名称（byName）来装配，可以结合@Qualifier注解一起使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​@resource默认按照ByName自动注入，它有两个重要属性name和type，spring将@Resource注解的name属性解析为bean的名字，type属性解析成bean的类型</p><p>@Resource装配顺序：</p><p>①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</p><p>②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</p><p>③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常 </p><p>④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</p><p><strong>spring框架中用到了那些设计模式</strong></p><p>​工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例</p><p>​单例模式：Bean默认为单例模式</p><p>​代理模式：spring的AOP采用了动态代理</p><p>​模板方法：用来解决代码重复的问题。如RestTemplate</p><p>​观察者模式：一个对象的行为依赖于另一个对象的状态，就是说被观察对象（目标对象）的状态发生改变时，会直接影响到观察对象的行为。定义对象建立一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新</p><p><strong>运行Spring Boot有哪几种方式</strong></p><p>​打包用命令或者放到容器中运行、用Maven插件运行、直接执行main方法</p><p><strong>如何理解spring boot中的starters？</strong></p><p>​starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成spring及其他技术，而不需要到处找示例代码和依赖包。如 你想使用Spring JPA访问数据库，只要加入springboot-starter-data-jpa启动器依赖就能使用了。 Spring Boot官方的启动器都是以spring-boot-starter-命名的，代表了一个特定的应用类型。第三方的启动器不能以spring-boot开头命名，它们都被Spring Boot官方保留。一般一个第三方的应该这样命名，像mybatis的mybatis-spring-boot-starter。</p><p><strong>spring boot中的监视器是什么</strong></p><p>​Spring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。</p><p><strong>如何使用spring boot实现异常处理</strong></p><p>​spring提供了一种使用@ControllerAdvice处理异常的非常有用的方法，来处理控制器类抛出的异常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//异常处理</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//全局异常处理执行的方法</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行全局异常处理！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//特定异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">error</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行了特定异常处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定义异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>FeiException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">error</span><span class="token punctuation">(</span>FeiException e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>spring boot配置加载顺序</strong></p><p>​1.properties文件     2.YAML文件    3.系统环境变量   4.命令行参数</p><p><strong>mybatis中，当实体类中的属性名和表中的字段名不一致时怎么办</strong>？</p><p>​1.通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span>”selectorder” parametertype<span class="token operator">=</span>”<span class="token keyword">int</span>”resultetype<span class="token operator">=</span>”me<span class="token punctuation">.</span>gacl<span class="token punctuation">.</span>domain<span class="token punctuation">.</span><span class="token keyword">order</span>”<span class="token operator">></span>        <span class="token keyword">select</span> order_id id<span class="token punctuation">,</span> order_no orderno <span class="token punctuation">,</span>order_price price form orders <span class="token keyword">where</span>order_id<span class="token operator">=</span><span class="token comment" spellcheck="true">#&amp;#123;id&amp;#125;;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span></code></pre><p>​2.通过映射字段名和实体类属性名的一一对应关系</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getOrder"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span> resultMap<span class="token operator">=</span><span class="token string">"orderresultmap"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders <span class="token keyword">where</span> order_id<span class="token operator">=</span><span class="token comment" spellcheck="true">#&amp;#123;id&amp;#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap <span class="token keyword">type</span><span class="token operator">=</span>”me<span class="token punctuation">.</span>gacl<span class="token punctuation">.</span>domain<span class="token punctuation">.</span><span class="token keyword">order</span>” id<span class="token operator">=</span>”orderresultmap”<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>–用id属性来映射主键字段–<span class="token operator">></span>        <span class="token operator">&lt;</span>id property<span class="token operator">=</span>”id” <span class="token keyword">column</span><span class="token operator">=</span>”order_id”<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span>–用result属性来映射非主键字段，property为实体类属性名，<span class="token keyword">column</span>为数据表中的属性–<span class="token operator">></span>        <span class="token operator">&lt;</span>result property <span class="token operator">=</span> “orderno” <span class="token keyword">column</span> <span class="token operator">=</span>”order_no”<span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span>”price” <span class="token keyword">column</span><span class="token operator">=</span>”order_price” <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>reslutMap<span class="token operator">></span></code></pre><p>在mybatisPlus中还可以使用：</p><p>​@TableName(value &#x3D; …) 当数据库名和实体类名不一致时或者是不符合驼峰命名时，需要此注解指定表名</p><p>​@TableField解决实体类的属性名和数据库的字段名不匹配的问题、实体类的属性字段在表中不存在的问题（如果实体类属性表中没有对应的字段，使用@TableField(exist &#x3D; false))</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"sys_dept"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysDept</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"部门名称"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"上级部门id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"parent_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long parentId<span class="token punctuation">;</span>        <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//字段不存在情况</span>    <span class="token keyword">private</span> String no<span class="token punctuation">;</span></code></pre><p><strong>mybatis实现分页功能：</strong></p><p>​1.全部结果查询出来，在进行分页，但是效率不高</p><p>​2.通过SQL语句实现，查询时在SQL语句后面添加<strong>limit</strong>分页语句</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"queryStuentBySql"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultMap<span class="token operator">=</span><span class="token string">"Student"</span><span class="token operator">></span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token comment" spellcheck="true">#&amp;#123;index&amp;#125; , #&amp;#123;pagesize&amp;#125; //index 要开始查询的第一条记录的索引</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">//pagesize 要查询的记录数</span></code></pre><p>​3.用RowBounds分页，创建RowBounds对象，使用有参传开始的条数（（page -1）*pagesize）和每页几条数据(pagesize)，调用mapper方法讲RowBounds对象传递进去 （不推荐）</p><p>​4.使用pageHelper插件分页、主要是通过mybatis拦截器实现的</p><p><strong>mybatisPlus实现分页</strong></p><p>​使用分页插件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分页插件配置     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PaginationInnerInterceptor innerInterceptor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerInterceptor<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        innerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>innerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisConfiguration <span class="token operator">-</span><span class="token operator">></span> mybatisConfiguration<span class="token punctuation">.</span><span class="token function">setUseGeneratedShortKey</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>service实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> SysUserMapper sysUserMapper<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> JsonData <span class="token function">getUserPage</span><span class="token punctuation">(</span>Integer pageNum<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> getUser <span class="token operator">=</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">getUserPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>getUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>其中，IPage是分页的关键，将我们需要分页的条件用Page处理，即可达到分页效果</p><p><strong>如何实现批量插入</strong></p><p>​1.单次循环插入</p><p>​2.通过foreach标签批量插入</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.buhe.demo.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO tb_student (name, age, phone, address, class_id) VALUES (#<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>age<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>phone<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>address<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>classId<span class="token entity" title="&#125;">&amp;#125;</span>)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- java项目www.fhadmin.org --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO tb_student (name, age, phone, address, class_id) VALUES    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        (#<span class="token entity" title="&#123;">&amp;#123;</span>item.name<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>item.age<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>item.phone<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>item.address<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>item.classId<span class="token entity" title="&#125;">&amp;#125;</span>)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>​3.批处理</p><p><strong>mybatis实现一对一有几种方式？</strong></p><p>​有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap里面配置association节点配置一对一的类就可以完成。嵌套查询是先查一个表，根据这个表里面的结果的 外键id，去再另外一个表里面查询数据,也是通过association配置，但另外一个表的查询通过select属性配置。</p><p><strong>mybatis的一级、二级缓存</strong></p><p>​一级缓存是基于PerpetualCache的HashMap本地缓存。其作用域为sesion，当Session flush或者close之后，该session中的所有缓存将清空，默认打开一级缓存</p><p>​二级缓存与一级缓存机制相同，默认也是采用PerpetualCache的HashMap存储，他存储作用域为Mapper（NameSpace），并且可以自定义存储源。默认不打开二级缓存。要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/2023/03/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Java如何解决跨域问题？"><a href="#Java如何解决跨域问题？" class="headerlink" title="Java如何解决跨域问题？"></a><strong>Java如何解决跨域问题？</strong></h4><p>​我们在开发过程中经常会遇到<a href="https://so.csdn.net/so/search?q=%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB&spm=1001.2101.3001.7020">前后端分离</a>而导致的跨域问题，导致无法获取返回结果。跨域就像分离前端和后端的一道鸿沟，君在这边，她在那边，两两不能往来.</p><p><strong>什么是跨域</strong></p><p>跨域（CORS）是指不同域名之间相互访问。跨域，指的是浏览器不能执行其他网站的脚本，它是由浏览器的<a href="https://so.csdn.net/so/search?q=%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5&spm=1001.2101.3001.7020">同源策略</a>所造成的，是浏览器对于JavaScript所定义的安全限制策略。</p><p><strong>什么情况下会跨域</strong></p><ul><li>同一协议， 如http或https</li><li>同一IP地址, 如127.0.0.1</li><li>同一端口, 如8080</li></ul><p>以上三个条件中有一个条件不同就会产生跨域问题。</p><p><strong>前端解决方案</strong></p><p>​1.使用JSONP方式实现跨域调用；</p><p>​2.使用NodeJS服务器做为服务代理，前端发起请求到NodeJS服务器， NodeJS服务器代理转发请求到后端服务器；</p><p><strong>后端解决方案</strong></p><p>​1.Nginx反向代理解决跨域问题</p><p>​2.使用使用@CrossOrigin注解，在需要跨域访问的类和方法中设置允许跨域访问(标注在controller类的方法上或者controller类上)</p><p>​<strong>在controller使用</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​<strong>在具体接口上使用</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@CrossOrigin</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​3.继承使用Spring Web的CorsFilter（适用于Spring MVC、Spring Boot）</p><p>​</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>CorsConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>UrlBasedCorsConfigurationSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CorsFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1,允许任何来源，这里可以线上填写具体允许的域名</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span> <span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2,允许任何请求头</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span>CorsConfiguration<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3,允许任何方法</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span>CorsConfiguration<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4,允许凭证</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​4.实现WebMvcConfigurer接口（适用于Spring Boot）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//标注这个类是一个配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//实现 WebMvcConfigurer 接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置允许跨域访问的路径</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置允许跨域访问的源</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//允许跨域请求的方法</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">168000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//预检间隔时间</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//允许头部设置</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否发送 cookie</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
